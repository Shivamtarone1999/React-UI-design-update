{"version":3,"sources":["Images/1.svg","Images/active__users.svg","Images/categories.svg","Images/number__stories.svg","Images/podcasts.svg","Images/publications.svg","Images/total__playing.svg","Header.js","Card.js","StoryList.js","PublicationList.js","Content.js","Publication.js","CategoryList.js","Category.js","Story.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Button","Avatar","Card","cardHead","cardContent","image","src","useStyles1","makeStyles","theme","root","flexShrink","marginLeft","spacing","TablePaginationActions","props","classes","useTheme","count","page","rowsPerPage","onChangePage","IconButton","onClick","event","disabled","aria-label","direction","Math","ceil","max","createData","name","calories","fat","rows","useStyles2","table","minWidth","marginRight","TableStoryList","React","useState","setPage","setRowsPerPage","emptyRows","min","length","TableContainer","component","Paper","Table","TableBody","slice","map","row","TableRow","key","TableCell","scope","style","width","align","height","colSpan","TableFooter","TablePagination","rowsPerPageOptions","label","value","SelectProps","inputProps","native","newPage","onChangeRowsPerPage","parseInt","target","ActionsComponent","TablePublicationList","Content","variant","color","noValidate","TextField","id","type","defaultValue","InputLabelProps","shrink","image1","image__active__users","image__number__stories","image__publications","image__categories","image__podcasts","image__total__playing","Publication","flex","padding","TableCategoryList","Category","Story","Main","exact","to","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.269a0b98.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.c0a71d5e.svg\";","module.exports = __webpack_public_path__ + \"static/media/active__users.9b2e219a.svg\";","module.exports = __webpack_public_path__ + \"static/media/categories.c1b27570.svg\";","module.exports = __webpack_public_path__ + \"static/media/number__stories.0ec28acf.svg\";","module.exports = __webpack_public_path__ + \"static/media/podcasts.8ec6241d.svg\";","module.exports = __webpack_public_path__ + \"static/media/publications.b29a9798.svg\";","module.exports = __webpack_public_path__ + \"static/media/total__playing.4c1eeb0e.svg\";","import React from 'react';\r\nimport './Header.css';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport { Avatar, Button } from '@material-ui/core';\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"brand__name\">\r\n                <h2>Dashboard</h2>\r\n            </div>\r\n            {/* <div className=\"header__center\">\r\n                <input type=\"search\" placeholder=\"Search...\" />\r\n                <Button>\r\n                    <SearchIcon />\r\n                </Button>\r\n            </div> */}\r\n            <div className=\"header__right\">\r\n\r\n                <Button>\r\n                    <Avatar />\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\r\nimport './Card.css';\r\n// import Chart from 'react-apexcharts';\r\n// import ApexCharts from 'apexcharts'\r\n\r\nfunction Card({ cardHead, cardContent, image }) {\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                <div className=\"card__head\">\r\n                    <h3> {cardHead} </h3>\r\n\r\n                    <div className=\"card__content\">\r\n                        <h2>{cardContent}</h2>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"image__section\">\r\n                    <div></div>\r\n\r\n                    <img className=\"image\" src={image} />\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n    root: {\r\n        flexShrink: 1,\r\n        marginLeft: theme.spacing(2.5),\r\n    },\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n    const classes = useStyles1();\r\n    const theme = useTheme();\r\n    const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n    const handleFirstPageButtonClick = (event) => {\r\n        onChangePage(event, 0);\r\n    };\r\n\r\n    const handleBackButtonClick = (event) => {\r\n        onChangePage(event, page - 1);\r\n    };\r\n\r\n    const handleNextButtonClick = (event) => {\r\n        onChangePage(event, page + 1);\r\n    };\r\n\r\n    const handleLastPageButtonClick = (event) => {\r\n        onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <IconButton\r\n                onClick={handleFirstPageButtonClick}\r\n                disabled={page === 0}\r\n                aria-label=\"first page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n            </IconButton>\r\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleNextButtonClick}\r\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                aria-label=\"next page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleLastPageButtonClick}\r\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                aria-label=\"last page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n            </IconButton>\r\n        </div>\r\n    );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n    count: PropTypes.number.isRequired,\r\n    onChangePage: PropTypes.func.isRequired,\r\n    page: PropTypes.number.isRequired,\r\n    rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction createData(name, calories, fat) {\r\n    return { name, calories, fat };\r\n}\r\n\r\nconst rows = [\r\n    createData('Story 1', 305, 3.7),\r\n    createData('Story 2', 452, 25.0),\r\n    createData('Story 3', 262, 16.0),\r\n    createData('Story 4', 159, 6.0),\r\n];\r\n\r\nconst useStyles2 = makeStyles({\r\n    table: {\r\n        minWidth: 500,\r\n        marginRight: '50px',\r\n    },\r\n});\r\n\r\nexport default function TableStoryList() {\r\n    const classes = useStyles2();\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    return (\r\n\r\n        <>\r\n            <h1>Story List</h1> <br />\r\n\r\n            <TableContainer component={Paper}>\r\n\r\n                <Table className={classes.table} aria-label=\"custom pagination table\">\r\n                    <TableBody >\r\n                        {(rowsPerPage > 0\r\n                            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                            : rows\r\n                        ).map((row) => (\r\n                            <TableRow key={row.name} >\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {row.name}\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 160 }} align=\"right\">\r\n                                    {row.calories}\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 160 }} align=\"right\">\r\n                                    {row.fat}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n\r\n                        {emptyRows > 0 && (\r\n                            <TableRow style={{ height: 53 * emptyRows }}>\r\n                                <TableCell colSpan={6} />\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n                    <TableFooter>\r\n                        <TableRow>\r\n                            <TablePagination\r\n                                rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\r\n                                colSpan={3}\r\n                                count={rows.length}\r\n                                rowsPerPage={rowsPerPage}\r\n                                page={page}\r\n                                SelectProps={{\r\n                                    inputProps: { 'aria-label': 'rows per page' },\r\n                                    native: true,\r\n                                }}\r\n                                onChangePage={handleChangePage}\r\n                                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                                ActionsComponent={TablePaginationActions}\r\n                            />\r\n                        </TableRow>\r\n                    </TableFooter>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            <br />\r\n            <br />\r\n\r\n        </>\r\n\r\n\r\n    );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n    root: {\r\n        flexShrink: 0,\r\n        marginLeft: theme.spacing(2.5),\r\n    },\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n    const classes = useStyles1();\r\n    const theme = useTheme();\r\n    const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n    const handleFirstPageButtonClick = (event) => {\r\n        onChangePage(event, 0);\r\n    };\r\n\r\n    const handleBackButtonClick = (event) => {\r\n        onChangePage(event, page - 1);\r\n    };\r\n\r\n    const handleNextButtonClick = (event) => {\r\n        onChangePage(event, page + 1);\r\n    };\r\n\r\n    const handleLastPageButtonClick = (event) => {\r\n        onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <IconButton\r\n                onClick={handleFirstPageButtonClick}\r\n                disabled={page === 0}\r\n                aria-label=\"first page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n            </IconButton>\r\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleNextButtonClick}\r\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                aria-label=\"next page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleLastPageButtonClick}\r\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                aria-label=\"last page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n            </IconButton>\r\n        </div>\r\n    );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n    count: PropTypes.number.isRequired,\r\n    onChangePage: PropTypes.func.isRequired,\r\n    page: PropTypes.number.isRequired,\r\n    rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction createData(name, calories, fat) {\r\n    return { name, calories, fat };\r\n}\r\n\r\nconst rows = [\r\n    createData('Publicaton 1', 305, 3.7),\r\n    createData('Publicaton 2', 452, 25.0),\r\n    createData('Publicaton 3', 262, 16.0),\r\n    createData('Publicaton 4', 262, 16.0),\r\n\r\n\r\n];\r\n\r\nconst useStyles2 = makeStyles({\r\n    table: {\r\n        minWidth: 300,\r\n        marginRight: 50,\r\n    },\r\n});\r\n\r\nexport default function TablePublicationList() {\r\n    const classes = useStyles2();\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    return (\r\n\r\n        <>\r\n            <h1>Publication List</h1> <br />\r\n\r\n            <TableContainer component={Paper}>\r\n\r\n                <Table className={classes.table} aria-label=\"custom pagination table\">\r\n                    <TableBody >\r\n                        {(rowsPerPage > 0\r\n                            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                            : rows\r\n                        ).map((row) => (\r\n                            <TableRow key={row.name} >\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {row.name}\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 160 }} align=\"right\">\r\n                                    {row.calories}\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 160 }} align=\"right\">\r\n                                    {row.fat}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n\r\n                        {emptyRows > 0 && (\r\n                            <TableRow style={{ height: 53 * emptyRows }}>\r\n                                <TableCell colSpan={6} />\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n                    <TableFooter>\r\n                        <TableRow>\r\n                            <TablePagination\r\n                                rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\r\n                                colSpan={3}\r\n                                count={rows.length}\r\n                                rowsPerPage={rowsPerPage}\r\n                                page={page}\r\n                                SelectProps={{\r\n                                    inputProps: { 'aria-label': 'rows per page' },\r\n                                    native: true,\r\n                                }}\r\n                                onChangePage={handleChangePage}\r\n                                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                                ActionsComponent={TablePaginationActions}\r\n                            />\r\n                        </TableRow>\r\n                    </TableFooter>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            <br />\r\n            <br />\r\n\r\n        </>\r\n\r\n\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Card from './Card';\r\nimport TableStoryList from './StoryList';\r\nimport './Content.css';\r\nimport { Button } from '@material-ui/core';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport LineChart from 'react-linechart';\r\nimport '../node_modules/react-linechart/dist/styles.css';\r\nimport { PieChart } from 'react-minimal-pie-chart';\r\n// import BarChart from 'react-bar-chart';\r\nimport TablePublicationList from './PublicationList';\r\n\r\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, CartesianGrid } from 'recharts';\r\n\r\nimport image1 from './Images/1.svg';\r\nimport image__active__users from './Images/active__users.svg';\r\nimport image__categories from './Images/categories.svg';\r\nimport image__number__stories from './Images/number__stories.svg';\r\nimport image__podcasts from './Images/podcasts.svg';\r\nimport image__publications from './Images/publications.svg';\r\nimport image__total__playing from './Images/total__playing.svg';\r\n\r\nfunction Content() {\r\n\r\n    const data = [\r\n        {\r\n            color: \"steelblue\",\r\n            points: [{ x: 1, y: 2 }, { x: 3, y: 5 }, { x: 7, y: -3 }, { x: 15, y: 20 }]\r\n        }\r\n    ];\r\n\r\n    const data2 = [{ name: 'Category 1', uv: 100, pv: 500, amt: 2400 }, { name: 'Category 2', uv: 600, pv: 2400, amt: 2400 }, { name: 'Category 3', uv: 300, pv: 2400, amt: 2400 }];\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"main__content\">\r\n            <div className=\"content__items\">\r\n                <div className=\"content__heading\">\r\n                    <h2>Main - Dashboard</h2>\r\n                </div>\r\n                <div>\r\n                    <Button variant=\"contained\" color=\"primary\">\r\n                        Download Report\r\n                </Button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Date Picker */}\r\n\r\n            <div className=\"date__picker\">\r\n\r\n                <p>Select Date</p>\r\n\r\n                <form noValidate>\r\n                    <TextField\r\n                        id=\"date\"\r\n                        label=\"Date\"\r\n                        type=\"date\"\r\n                        defaultValue=\"2020-10-02\"\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />\r\n                </form>\r\n\r\n                <form noValidate>\r\n                    <TextField\r\n                        id=\"date\"\r\n                        label=\"Date\"\r\n                        type=\"date\"\r\n                        defaultValue=\"2020-10-02\"\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />\r\n                </form>\r\n            </div><br />\r\n\r\n\r\n            <div className=\"cards\">\r\n                <div className=\"card__align\">\r\n                    <Card cardHead=\"No. of Subscriber\" cardContent={54566} image={image1} />\r\n                    <Card cardHead=\"Active Users\" cardContent={10245} image={image__active__users} />\r\n                    <Card cardHead=\"No. of Stories\" cardContent={1000} image={image__number__stories}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"card__align\">\r\n                    <Card cardHead=\"No. of Publications\" cardContent={125} image={image__publications} />\r\n                    <Card cardHead=\"No. of Categories\" cardContent={895} image={image__categories} />\r\n                    <Card cardHead=\"No. of Podcasts\" cardContent={750} image={image__podcasts} />\r\n                </div>\r\n\r\n                <div className=\"\" style={{\r\n                    marginLeft: '26px'\r\n                }}>\r\n                    <Card cardHead=\"Total Playing Today\" cardContent={125} image={image__total__playing} />\r\n                </div>\r\n\r\n\r\n            </div>\r\n            <br />\r\n            <hr />\r\n\r\n            {/* Date Picker */}\r\n\r\n            <div className=\"date__picker\">\r\n\r\n                <p>Select Date</p>\r\n\r\n                <form noValidate>\r\n                    <TextField\r\n                        id=\"date\"\r\n                        label=\"Date\"\r\n                        type=\"date\"\r\n                        defaultValue=\"2020-10-02\"\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />\r\n                </form>\r\n\r\n                <form noValidate>\r\n                    <TextField\r\n                        id=\"date\"\r\n                        label=\"Date\"\r\n                        type=\"date\"\r\n                        defaultValue=\"2020-10-02\"\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />\r\n                </form>\r\n            </div>\r\n\r\n            {/* Charts */}\r\n\r\n            <div className=\"charts\">\r\n                {/* <div className=\"pieChart\">\r\n                    <PieChart className=\"pie__chart\"\r\n                        data={[\r\n                            { title: 'One', value: 10, color: '#E38627' },\r\n                            { title: 'Two', value: 15, color: '#C13C37' },\r\n                            { title: 'Three', value: 20, color: '#6A2135' },\r\n                        ]}\r\n                    />\r\n                    <p>Publications</p>\r\n                </div> */}\r\n\r\n                {/* <div className=\"bar__graph\">\r\n                    <BarChart style={{ marginTop: '25px' }} width={600} height={300} data={data2}>\r\n                        <XAxis dataKey=\"name\" stroke=\"#8884d8\" />\r\n                        <YAxis />\r\n                        <Tooltip wrapperStyle={{ width: 100, backgroundColor: '#ccc' }} />\r\n                        <Legend width={100} wrapperStyle={{ top: 40, right: 20, backgroundColor: '#f5f5f5', border: '1px solid #d5d5d5', borderRadius: 3, lineHeight: '40px' }} />\r\n                        <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n                        <Bar dataKey=\"uv\" fill=\"#8884d8\" barSize={30} />\r\n\r\n                    </BarChart>\r\n                    <p style={{ textAlign: 'center' }}>Categories</p>\r\n                </div> */}\r\n\r\n            </div>\r\n\r\n            <br /><br />\r\n\r\n            {/* <div className=\"Line__chart\">\r\n                <LineChart\r\n                    width={800}\r\n                    height={400}\r\n                    data={data}\r\n                />\r\n                <p>Stories (by date)</p>\r\n            </div> */}\r\n\r\n            <br /><br /><br />\r\n\r\n            {/* Story List */}\r\n            <div className=\"TableStoryList\">\r\n                <TableStoryList />\r\n            </div>\r\n\r\n            <br /><br />\r\n            {/* Publication List */}\r\n            {/* <div className=\"TablePublicationList\">\r\n                <TablePublicationList />\r\n            </div> */}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Content;","import React from 'react';\r\nimport TablePublicationList from './PublicationList';\r\n\r\nfunction Publication() {\r\n    return (\r\n        <div style={{ flex: '0.88', padding: '25px' }}>\r\n            <TablePublicationList style={{ padding: '25px' }} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Publication;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n    root: {\r\n        flexShrink: 0,\r\n        marginLeft: theme.spacing(2.5),\r\n    },\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n    const classes = useStyles1();\r\n    const theme = useTheme();\r\n    const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n    const handleFirstPageButtonClick = (event) => {\r\n        onChangePage(event, 0);\r\n    };\r\n\r\n    const handleBackButtonClick = (event) => {\r\n        onChangePage(event, page - 1);\r\n    };\r\n\r\n    const handleNextButtonClick = (event) => {\r\n        onChangePage(event, page + 1);\r\n    };\r\n\r\n    const handleLastPageButtonClick = (event) => {\r\n        onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <IconButton\r\n                onClick={handleFirstPageButtonClick}\r\n                disabled={page === 0}\r\n                aria-label=\"first page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n            </IconButton>\r\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleNextButtonClick}\r\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                aria-label=\"next page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleLastPageButtonClick}\r\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                aria-label=\"last page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n            </IconButton>\r\n        </div>\r\n    );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n    count: PropTypes.number.isRequired,\r\n    onChangePage: PropTypes.func.isRequired,\r\n    page: PropTypes.number.isRequired,\r\n    rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction createData(name, calories, fat) {\r\n    return { name, calories, fat };\r\n}\r\n\r\nconst rows = [\r\n    createData('Category 1', 305, 3.7),\r\n    createData('Category 2', 452, 25.0),\r\n    createData('Category 3', 262, 16.0),\r\n    createData('Category 4', 262, 16.0),\r\n\r\n\r\n];\r\n\r\nconst useStyles2 = makeStyles({\r\n    table: {\r\n        minWidth: 300,\r\n        marginRight: 50,\r\n    },\r\n});\r\n\r\nexport default function TableCategoryList() {\r\n    const classes = useStyles2();\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    return (\r\n\r\n        <>\r\n            <h1>Publication List</h1> <br />\r\n\r\n            <TableContainer component={Paper}>\r\n\r\n                <Table className={classes.table} aria-label=\"custom pagination table\">\r\n                    <TableBody >\r\n                        {(rowsPerPage > 0\r\n                            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                            : rows\r\n                        ).map((row) => (\r\n                            <TableRow key={row.name} >\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {row.name}\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 160 }} align=\"right\">\r\n                                    {row.calories}\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 160 }} align=\"right\">\r\n                                    {row.fat}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n\r\n                        {emptyRows > 0 && (\r\n                            <TableRow style={{ height: 53 * emptyRows }}>\r\n                                <TableCell colSpan={6} />\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n                    <TableFooter>\r\n                        <TableRow>\r\n                            <TablePagination\r\n                                rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\r\n                                colSpan={3}\r\n                                count={rows.length}\r\n                                rowsPerPage={rowsPerPage}\r\n                                page={page}\r\n                                SelectProps={{\r\n                                    inputProps: { 'aria-label': 'rows per page' },\r\n                                    native: true,\r\n                                }}\r\n                                onChangePage={handleChangePage}\r\n                                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                                ActionsComponent={TablePaginationActions}\r\n                            />\r\n                        </TableRow>\r\n                    </TableFooter>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            <br />\r\n            <br />\r\n\r\n        </>\r\n\r\n\r\n    );\r\n}\r\n","import React from 'react'\r\nimport TableCategoryList from './CategoryList';\r\n\r\nfunction Category() {\r\n    return (\r\n        <div style={{ flex: '0.88', padding: '25px' }}>\r\n            <TableCategoryList />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Category;\r\n","import React from 'react';\r\nimport TableStoryList from './StoryList';\r\n\r\nfunction Story() {\r\n    return (\r\n        <div style={{ flex: '0.88', padding: '25px' }}>\r\n            <TableStoryList />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Story;\r\n","import React from 'react';\r\nimport Content from './Content';\r\nimport Sidebar from './Sidebar';\r\nimport './Sidebar.css';\r\nimport SurroundSoundIcon from '@material-ui/icons/SurroundSound';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport ClassIcon from '@material-ui/icons/Class';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport Publication from './Publication';\r\nimport Category from './Category';\r\nimport Story from './Story';\r\n\r\nimport ReactDOM from \"react-dom\";\r\nimport { Switch, Route, Link, NavLink } from \"react-router-dom\";\r\n\r\n\r\nimport './Main.css';\r\n\r\nfunction Main() {\r\n    return (\r\n        <div className=\"main\">\r\n            {/* <Sidebar className=\"sidebar\" /> */}\r\n\r\n            <div className=\"sidebar\">\r\n                <p className=\"sidebar__head\">Voice News Times\r\n            </p> <br /> <br />\r\n                <hr />\r\n\r\n                <div className=\"sidebar__items\">\r\n                    <DashboardIcon className=\"sidebar__icon\" />\r\n                    <NavLink className=\"link__\" exact to=\"/\">Dashboard</NavLink>\r\n                </div>\r\n\r\n                <hr /> <br />\r\n\r\n                <div className=\"sidebar__items\">\r\n                    <HomeIcon className=\"sidebar__icon\" />\r\n                    <NavLink className=\"link__\" to=\"/publication\"><p>Publication</p></NavLink>\r\n\r\n                </div>\r\n\r\n                <div className=\"sidebar__items\">\r\n                    <SurroundSoundIcon className=\"sidebar__icon\" />\r\n                    <NavLink className=\"link__\" to=\"/story\"><p>Story List</p></NavLink>\r\n\r\n                </div>\r\n\r\n                <div className=\"sidebar__items\">\r\n                    <ClassIcon className=\"sidebar__icon\" />\r\n                    <NavLink className=\"link__\" to=\"/category\"><p>Category List</p></NavLink>\r\n\r\n                </div>\r\n\r\n                <hr />\r\n            </div>\r\n\r\n            <Switch>\r\n                {/* <Content className=\"content\" /> */}\r\n                <Route exact path='/' component={Content} />\r\n                <Route path='/publication' component={Publication} />\r\n                <Route path='/story' component={Story} />\r\n                <Route path='/category' component={Category} />\r\n            </Switch>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport './App.css';\n\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\n\n\nimport Header from './Header';\nimport Main from './Main';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Header />\n      <BrowserRouter>\n        <Main />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}